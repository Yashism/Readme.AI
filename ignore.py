import re

ignore_patterns = [
    r'\.(lock)$|(-lock\.yaml)$',
    r'package-lock.json',
    r'yarn.lock',
    r'\.git',
    r'.git/',
    r'\.gitignore',
    r'.txt',
    r'.gitignore',
    r'\.gitattributes',
    r'.gitmodules',
    r'\.gitkeep',
    r'\.svn',
    r'\.hg',
    r'\.bzr',
    r'\.DS_Store',
    r'\.AppleDouble',
    r'\.LSOverride',
    r'\._.*',
    r'\.Spotlight-V100',
    r'\.Trashes',
    r'\.DocumentRevisions-V100',
    r'\.fseventsd',
    r'\.TemporaryItems',
    r'\.apdisk',
    r'\.com.apple.timemachine.donotpresent',
    r'\.localized',
    r'\.node-gyp',
    r'\.npmignore',
    r'\.npmrc',
    r'\.npmrc\.yarn',
    r'\.yarnrc',
    r'\.yarnrc\.yarn',
    r'\.yarnclean',
    r'\.yarn-integrity',
    r'\.yarn-metadata\.json',
    r'\.env',
    r'\.env\..*',
    r'\.env.local',
    r'\.env.development',
    r'\.env.development.local',
    r'\.env.test',
    r'\.env.test.local',
    r'\.env.production',
    r'\.env.production.local',
    r'\.env.staging',
    r'\.env.staging.local',
    r'\.env.*.local',
    r'\.env.*.local',
    r'\.env.*',
    r'\.env.build',
    r'\.env.build.local',
    r'\.env.example',
    r'\.env.defaults',
    r'\.env.schema',
    r'\.env.schema.json',
    r'\.env.example.json',
    r'\.env.sample',
    r'\.env.test',
    r'\.env.test.json',
    r'\.env.development',
    r'\.env.development.json',
    r'\.env.production',
    r'\.env.production.json',
    r'\.env.staging',
    r'\.env.staging.json',
    r'\.env.local',
    r'\.vscode',
    r'\.vscodeignore',
    r'\.vscodeextension',
    r'\.md$',
    r'\.markdown$',
    r'\.LICENSE$',
    r'LICENSE$',
    r'\.LICENSE\.txt$',
    r'\.LICENSE\.md$',
    r'\.LICENSE\.markdown$',
    r'\.LICENSE-MIT$',
    r'LICENSE\..*',
    r'\.ico$',
    r'\.png$',
    r'\.jpg$',
    r'\.jpeg$',
    r'\.gif$',
    r'\.svg$',
    r'\.pdf$',
    r'\.doc$',
    r'\.docx$',
    r'\.xls$',
    r'\.xlsx$',
    r'\.ppt$',
    r'\.pptx$',
    r'\.mp3$',
    r'\.mp4$',
    r'\.wav$',
    r'\.zip$',
    r'\.tar$',
    r'\.gz$',
    r'\.bz2$',
    r'\.rar$',
    r'\.7z$',
    r'\.exe$',
    r'\.dmg$',
    r'\.apk$',
    r'\.jar$',
    r'\.war$',
    r'\.deb$',
    r'\.rpm$',
    r'\.msi$',
    r'\.img$',
    r'\.iso$',
    r'\.bin$',
    r'\.csv$',
    r'\.tsv$',
    r'\.dat$',
    r'\.db$',
    r'\.db\.lock$',
    r'\.db-shm$',
    r'\.db-wal$',
    r'\.vscode',
    r'__pycache__',
    r'\.sf3$',
    r'\.sfd$',
    r'\.woff$',
    r'\.woff2$',
    r'\.eot$',
    r'\.ttf$',
    r'\.otf$',
    r'\.class$',
    r'\.swf$',
    r'\.fla$',
    r'\.flv$',
    r'\.wmv$',
    r'\.avi$',
    r'\.mov$',
    r'\.mpg$',
    r'\.mpeg$',
    r'\.mkv$',
    r'\.webm$',
    r'\.m4v$',
    r'\.m4a$',
    r'\.m4p$',
    r'\.m4b$',
    r'\.m4r$',
    r'\.3gp$',
    r'\.aac$',
    r'\.opus$',
    r'\.ogg$',
    r'\.oga$',
    r'\.ogv$',
    r'\.ogx$',
    r'\.ogm$',
    r'\.srt$',
    r'\.vtt$',
    r'\.ass$',
    r'\.ssa$',
    r'\.ass$',
]

def should_ignore(file):
    return any(re.search(pattern, file) for pattern in ignore_patterns)
